% Name: Robert Kim
% Date: 01-28-2022
% Email: rkim@salk.edu
% eval_model.m
% Description: Matlab implementation of the rate model
% HK added random seed

function out = fnc_eval_model(model_dir, uu, feedback, seed)
% INPUT
%   model_dir: full path to the trained model
%   uu: input signal
%   feedback: false or true (interlayer feedback)

%rng(seed, 'twister');

% Load the data first
load(model_dir);

% Total number of time-points
T = size(uu, 2);
DeltaT = 1;

% Time points-by-neurons
X1 = zeros(T, N1);
R1 = zeros(T, N1);

X2 = zeros(T, N2);
R2 = zeros(T, N2);

X3 = zeros(T, N3);
R3 = zeros(T, N3);

X1(1, :) = randn(1, N1)/100;
R1(1, :) = 1./(1+exp(-X1(1, :)));

X2(1, :) = randn(1, N2)/100;
R2(1, :) = 1./(1+exp(-X2(1, :)));

X3(1, :) = randn(1, N3)/100;
R3(1, :) = 1./(1+exp(-X3(1, :)));

% Get all the weights
ww1 = w1*m1;
ww2 = w2*m2;
ww3 = w3*m3;

ww21 = w21*m1;
ww32 = w32*m2;
if feedback == true
  ww12 = w12*m2;
  ww23 = w23*m3;
end

% Synaptic decay constants
taus_sig1 = (1./(1+exp(-taus_gaus1)))*(taus(2) - taus(1)) + taus(1);
taus_sig2 = (1./(1+exp(-taus_gaus2)))*(taus(2) - taus(1)) + taus(1);
taus_sig3 = (1./(1+exp(-taus_gaus3)))*(taus(2) - taus(1)) + taus(1);

O = zeros(1, T);
for t = 2:T+1
  if feedback == true
    next_x1 = (1-DeltaT./taus_sig1).*transpose(X1(t-1, :)) + ...
      (DeltaT./taus_sig1).*(ww1*transpose(R1(t-1, :)) + ...
      ww12*transpose(R2(t-1, :)) + w_in*uu(:, t-1)) + randn(N1, 1)/10;
  else
    next_x1 = (1-DeltaT./taus_sig1).*transpose(X1(t-1, :)) + ...
      (DeltaT./taus_sig1).*(ww1*transpose(R1(t-1, :)) + ...
      w_in*uu(:, t-1)) + randn(N1, 1)/10;
  end
  next_r1 = 1./(1+exp(-next_x1));

  X1(t, :) = transpose(next_x1);
  R1(t, :) = transpose(next_r1);

  if feedback == true
    next_x2 = (1-DeltaT./taus_sig2).*transpose(X2(t-1, :)) + ...
      (DeltaT./taus_sig2).*(ww2*transpose(R2(t-1, :)) + ...
      ww21*transpose(R1(t-1, :)) + ww23*transpose(R3(t-1, :))) + ...
      randn(N2, 1)/10;
  else
    next_x2 = (1-DeltaT./taus_sig2).*transpose(X2(t-1, :)) + ...
      (DeltaT./taus_sig2).*(ww2*transpose(R2(t-1, :)) + ...
      ww21*transpose(R1(t-1, :))) + ...
      randn(N2, 1)/10;
  end
  next_r2 = 1./(1+exp(-next_x2));

  X2(t, :) = transpose(next_x2);
  R2(t, :) = transpose(next_r2);

  next_x3 = (1-DeltaT./taus_sig3).*transpose(X3(t-1, :)) + ...
    (DeltaT./taus_sig3).*(ww3*transpose(R3(t-1, :)) + ...
    ww32*transpose(R2(t-1, :))) + ...
    randn(N3, 1)/10;
  next_r3 = 1./(1+exp(-next_x3));

  X3(t, :) = transpose(next_x3);
  R3(t, :) = transpose(next_r3);

  O(t) = w_out*transpose(R3(t, :)) + b_out;
end

out = containers.Map;

out('X1') = X1(2:end, :);
out('X2') = X2(2:end, :);
out('X3') = X3(2:end, :);

out('R1') = R1(2:end, :);
out('R2') = R2(2:end, :);
out('R3') = R3(2:end, :);

out('O') = O(2:end);






